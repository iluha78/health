import { useEffect, useMemo, useState } from "react";
import type { FormEvent } from "react";
import { observer } from "mobx-react-lite";
import { userStore } from "./stores/user";
import type { AssistantMessage } from "./types/api";
import { apiUrl } from "./lib/api";
import "./App.css";

type TabKey = "bp" | "lipid" | "nutrition" | "assistant";
type AdjustmentGoal = "lower" | "raise";

type BloodPressureRecord = {
  id: string;
  createdAt: string;
  systolic: string;
  diastolic: string;
  pulse: string;
  goal: AdjustmentGoal;
  question: string;
  comment: string;
  advice: string;
};

type LipidRecord = {
  id: string;
  createdAt: string;
  date: string;
  cholesterol: string;
  hdl: string;
  ldl: string;
  triglycerides: string;
  glucose: string;
  goal: AdjustmentGoal;
  question: string;
  comment: string;
  advice: string;
};

type NutritionRecord = {
  id: string;
  createdAt: string;
  weight: string;
  height: string;
  calories: string;
  activity: string;
  question: string;
  comment: string;
  advice: string;
};

const TAB_ITEMS: { key: TabKey; label: string; icon: string }[] = [
  { key: "bp", label: "–î–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—É–ª—å—Å", icon: "ü©∫" },
  { key: "lipid", label: "–õ–∏–ø–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–∞—Ö–∞—Ä", icon: "ü©∏" },
  { key: "nutrition", label: "–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥", icon: "ü•ó" },
  { key: "assistant", label: "AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", icon: "ü§ñ" }
];

const createRecordId = () => `${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 8)}`;

const formatDateTime = (value: string) => {
  try {
    return new Intl.DateTimeFormat("ru-RU", { dateStyle: "medium", timeStyle: "short" }).format(new Date(value));
  } catch (err) {
    console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É", err);
    return value;
  }
};

const storageKey = (scope: string, userId: number | null) => `cholestofit_${scope}_archive_${userId ?? "guest"}`;

const App = observer(() => {
  const [mode, setMode] = useState<"login" | "register">("login");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const [activeTab, setActiveTab] = useState<TabKey>("bp");

  const [bpForm, setBpForm] = useState({
    systolic: "",
    diastolic: "",
    pulse: "",
    goal: "lower" as AdjustmentGoal,
    question: "",
    comment: ""
  });
  const [bpAdvice, setBpAdvice] = useState("");
  const [bpLoading, setBpLoading] = useState(false);
  const [bpError, setBpError] = useState<string | null>(null);

  const [lipidForm, setLipidForm] = useState({
    date: "",
    cholesterol: "",
    hdl: "",
    ldl: "",
    triglycerides: "",
    glucose: "",
    goal: "lower" as AdjustmentGoal,
    question: "",
    comment: ""
  });
  const [lipidAdvice, setLipidAdvice] = useState("");
  const [lipidLoading, setLipidLoading] = useState(false);
  const [lipidError, setLipidError] = useState<string | null>(null);

  const [nutritionForm, setNutritionForm] = useState({
    weight: "",
    height: "",
    calories: "",
    activity: "",
    question: "",
    comment: ""
  });
  const [nutritionAdvice, setNutritionAdvice] = useState("");
  const [nutritionLoading, setNutritionLoading] = useState(false);
  const [nutritionError, setNutritionError] = useState<string | null>(null);

  const [bpHistory, setBpHistory] = useState<BloodPressureRecord[]>([]);
  const [lipidHistory, setLipidHistory] = useState<LipidRecord[]>([]);
  const [nutritionHistory, setNutritionHistory] = useState<NutritionRecord[]>([]);

  const [assistantMessages, setAssistantMessages] = useState<AssistantMessage[]>([]);
  const [assistantInput, setAssistantInput] = useState("");
  const [assistantLoading, setAssistantLoading] = useState(false);
  const [assistantError, setAssistantError] = useState<string | null>(null);

  const jsonHeaders = useMemo(() => {
    if (!userStore.token) return undefined;
    return {
      Authorization: `Bearer ${userStore.token}`,
      "Content-Type": "application/json"
    } as Record<string, string>;
  }, [userStore.token]);

  const userId = userStore.me?.id ?? null;

  useEffect(() => {
    if (userStore.token) {
      setActiveTab("bp");
      if (!userStore.me) {
        void userStore.refresh();
      }
    } else {
      resetState();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [userStore.token]);

  useEffect(() => {
    if (typeof window === "undefined") return;
    const archiveUserId = userId ?? null;
    const readArray = (key: string) => {
      const saved = window.localStorage.getItem(key);
      if (!saved) return null;
      try {
        const parsed = JSON.parse(saved);
        return Array.isArray(parsed) ? (parsed as unknown[]) : null;
      } catch (err) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∞—Ä—Ö–∏–≤ ${key}`, err);
        return null;
      }
    };

    const bpKey = storageKey("bp", archiveUserId);
    const lipidKey = storageKey("lipid", archiveUserId);
    const nutritionKey = storageKey("nutrition", archiveUserId);

    const bpData = readArray(bpKey) as Partial<BloodPressureRecord>[] | null;
    if (bpData && bpData.length > 0) {
      setBpHistory(
        bpData.map(item => ({
          id: item.id ?? createRecordId(),
          createdAt: item.createdAt ?? new Date().toISOString(),
          systolic: item.systolic ?? "",
          diastolic: item.diastolic ?? "",
          pulse: item.pulse ?? "",
          goal: item.goal ?? "lower",
          question: item.question ?? "",
          comment: item.comment ?? "",
          advice: item.advice ?? ""
        }))
      );
    } else {
      setBpHistory([]);
    }

    const lipidData = readArray(lipidKey) as Partial<LipidRecord>[] | null;
    if (lipidData && lipidData.length > 0) {
      setLipidHistory(
        lipidData.map(item => ({
          id: item.id ?? createRecordId(),
          createdAt: item.createdAt ?? new Date().toISOString(),
          date: item.date ?? "",
          cholesterol: item.cholesterol ?? "",
          hdl: item.hdl ?? "",
          ldl: item.ldl ?? "",
          triglycerides: item.triglycerides ?? "",
          glucose: item.glucose ?? "",
          goal: item.goal ?? "lower",
          question: item.question ?? "",
          comment: item.comment ?? "",
          advice: item.advice ?? ""
        }))
      );
    } else {
      const legacyKey = storageKey("metabolic", archiveUserId);
      const legacy = readArray(legacyKey) as
        | {
            id?: string;
            createdAt?: string;
            cholesterol?: string;
            sugar?: string;
            cholGoal?: AdjustmentGoal;
            sugarGoal?: AdjustmentGoal;
            question?: string;
            comment?: string;
            advice?: string;
          }[]
        | null;
      if (legacy && legacy.length > 0) {
        const converted: LipidRecord[] = legacy.map(item => ({
          id: item.id ?? createRecordId(),
          createdAt: item.createdAt ?? new Date().toISOString(),
          date: "",
          cholesterol: item.cholesterol ?? "",
          hdl: "",
          ldl: "",
          triglycerides: "",
          glucose: item.sugar ?? "",
          goal: item.cholGoal ?? "lower",
          question: item.question ?? "",
          comment: item.comment ?? "",
          advice: item.advice ?? ""
        }));
        setLipidHistory(converted);
      } else {
        setLipidHistory([]);
      }
    }

    const nutritionData = readArray(nutritionKey) as Partial<NutritionRecord>[] | null;
    if (nutritionData && nutritionData.length > 0) {
      setNutritionHistory(
        nutritionData.map(item => ({
          id: item.id ?? createRecordId(),
          createdAt: item.createdAt ?? new Date().toISOString(),
          weight: item.weight ?? "",
          height: item.height ?? "",
          calories: item.calories ?? "",
          activity: item.activity ?? "",
          question: item.question ?? "",
          comment: item.comment ?? "",
          advice: item.advice ?? ""
        }))
      );
    } else {
      setNutritionHistory([]);
    }
  }, [userId]);

  useEffect(() => {
    if (typeof window === "undefined") return;
    const archiveUserId = userId ?? null;
    window.localStorage.setItem(storageKey("bp", archiveUserId), JSON.stringify(bpHistory));
  }, [bpHistory, userId]);

  useEffect(() => {
    if (typeof window === "undefined") return;
    const archiveUserId = userId ?? null;
    window.localStorage.setItem(storageKey("lipid", archiveUserId), JSON.stringify(lipidHistory));
  }, [lipidHistory, userId]);

  useEffect(() => {
    if (typeof window === "undefined") return;
    const archiveUserId = userId ?? null;
    window.localStorage.setItem(storageKey("nutrition", archiveUserId), JSON.stringify(nutritionHistory));
  }, [nutritionHistory, userId]);

  function resetState() {
    setActiveTab("bp");
    setBpForm({ systolic: "", diastolic: "", pulse: "", goal: "lower", question: "", comment: "" });
    setBpAdvice("");
    setBpError(null);
    setLipidForm({
      date: "",
      cholesterol: "",
      hdl: "",
      ldl: "",
      triglycerides: "",
      glucose: "",
      goal: "lower",
      question: "",
      comment: ""
    });
    setLipidAdvice("");
    setLipidError(null);
    setNutritionForm({ weight: "", height: "", calories: "", activity: "", question: "", comment: "" });
    setNutritionAdvice("");
    setNutritionError(null);
    setBpHistory([]);
    setLipidHistory([]);
    setNutritionHistory([]);
    setAssistantMessages([]);
    setAssistantInput("");
    setAssistantError(null);
    setAssistantLoading(false);
  }

  async function handleAuthSubmit(e: FormEvent) {
    e.preventDefault();
    try {
      if (mode === "login") {
        await userStore.login(email, password);
      } else {
        await userStore.register(email, password);
      }
    } catch (err) {
      console.error(err);
    }
  }

  async function askAssistant(prompt: string): Promise<string> {
    if (!userStore.token || !jsonHeaders) {
      throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
    }
    const r = await fetch(apiUrl("/assistant/chat"), {
      method: "POST",
      headers: jsonHeaders,
      body: JSON.stringify({ message: prompt, history: [] })
    });
    const data = await r.json();
    if (!r.ok || typeof data.reply !== "string") {
      const message = typeof data.error === "string" ? data.error : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞";
      throw new Error(message);
    }
    return data.reply.trim();
  }

  async function handleBloodPressureSubmit(e: FormEvent) {
    e.preventDefault();
    setBpLoading(true);
    setBpError(null);
    try {
      const metrics: string[] = [];
      if (bpForm.systolic) metrics.push(`—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ ${bpForm.systolic} –º–º —Ä—Ç. —Å—Ç.`);
      if (bpForm.diastolic) metrics.push(`–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ ${bpForm.diastolic} –º–º —Ä—Ç. —Å—Ç.`);
      if (bpForm.pulse) metrics.push(`–ø—É–ª—å—Å ${bpForm.pulse} —É–¥/–º–∏–Ω`);
      if (bpForm.comment) metrics.push(`–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${bpForm.comment}`);
      const metricSummary = metrics.length > 0 ? metrics.join(", ") : "–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã";
      const goalText = bpForm.goal === "lower" ? "—Å–Ω–∏–∑–∏—Ç—å" : "–ø–æ–≤—ã—Å–∏—Ç—å";
      const prompt = [
        "–¢—ã ‚Äî –∫–∞—Ä–¥–∏–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.",
        `–ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–æ–±—â–∞–µ—Ç: ${metricSummary}.`,
        `–ü–æ–º–æ–≥–∏ ${goalText} –¥–∞–≤–ª–µ–Ω–∏–µ –∏/–∏–ª–∏ –ø—É–ª—å—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.`,
        "–î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏ –∏ —É–ø–æ–º—è–Ω–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        bpForm.question ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞: ${bpForm.question}.` : ""
      ]
        .filter(Boolean)
        .join(" ");
      const reply = await askAssistant(prompt);
      const trimmedReply = reply.trim();
      setBpAdvice(trimmedReply);
      const record: BloodPressureRecord = {
        id: createRecordId(),
        createdAt: new Date().toISOString(),
        systolic: bpForm.systolic,
        diastolic: bpForm.diastolic,
        pulse: bpForm.pulse,
        goal: bpForm.goal,
        question: bpForm.question.trim(),
        comment: bpForm.comment.trim(),
        advice: trimmedReply
      };
      setBpHistory(prev => [record, ...prev]);
    } catch (err) {
      setBpError(err instanceof Error ? err.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
      setBpAdvice("");
    } finally {
      setBpLoading(false);
    }
  }

  function saveBloodPressureToArchive() {
    const hasMetrics = bpForm.systolic || bpForm.diastolic || bpForm.pulse;
    if (!hasMetrics) {
      setBpError("–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –∞—Ä—Ö–∏–≤–µ");
      return;
    }
    setBpError(null);
    const record: BloodPressureRecord = {
      id: createRecordId(),
      createdAt: new Date().toISOString(),
      systolic: bpForm.systolic,
      diastolic: bpForm.diastolic,
      pulse: bpForm.pulse,
      goal: bpForm.goal,
      question: bpForm.question.trim(),
      comment: bpForm.comment.trim(),
      advice: ""
    };
    setBpHistory(prev => [record, ...prev]);
  }

  async function handleLipidSubmit(e: FormEvent) {
    e.preventDefault();
    setLipidLoading(true);
    setLipidError(null);
    try {
      const metrics: string[] = [];
      if (lipidForm.date) metrics.push(`–¥–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ ${lipidForm.date}`);
      if (lipidForm.cholesterol) metrics.push(`–æ–±—â–∏–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω ${lipidForm.cholesterol} –º–º–æ–ª—å/–ª`);
      if (lipidForm.hdl) metrics.push(`–õ–ü–í–ü ${lipidForm.hdl} –º–º–æ–ª—å/–ª`);
      if (lipidForm.ldl) metrics.push(`–õ–ü–ù–ü ${lipidForm.ldl} –º–º–æ–ª—å/–ª`);
      if (lipidForm.triglycerides) metrics.push(`—Ç—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã ${lipidForm.triglycerides} –º–º–æ–ª—å/–ª`);
      if (lipidForm.glucose) metrics.push(`–≥–ª—é–∫–æ–∑–∞ –∫—Ä–æ–≤–∏ ${lipidForm.glucose} –º–º–æ–ª—å/–ª`);
      if (lipidForm.comment) metrics.push(`–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${lipidForm.comment}`);
      const prompt = [
        "–¢—ã ‚Äî –≤—Ä–∞—á –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –∏ —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥.",
        metrics.length > 0 ? `–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: ${metrics.join(", ")}.` : "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–ª —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.",
        lipidForm.goal === "lower"
          ? "–ü–æ–º–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–Ω–∏–∑–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π."
          : "–ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–µ.",
        "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤: –ø–∏—Ç–∞–Ω–∏–µ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫–æ–Ω—Ç—Ä–æ–ª—å –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –∏ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        lipidForm.question ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞: ${lipidForm.question}.` : ""
      ]
        .filter(Boolean)
        .join(" ");
      const reply = await askAssistant(prompt);
      const trimmedReply = reply.trim();
      setLipidAdvice(trimmedReply);
      const record: LipidRecord = {
        id: createRecordId(),
        createdAt: new Date().toISOString(),
        date: lipidForm.date,
        cholesterol: lipidForm.cholesterol,
        hdl: lipidForm.hdl,
        ldl: lipidForm.ldl,
        triglycerides: lipidForm.triglycerides,
        glucose: lipidForm.glucose,
        goal: lipidForm.goal,
        question: lipidForm.question.trim(),
        comment: lipidForm.comment.trim(),
        advice: trimmedReply
      };
      setLipidHistory(prev => [record, ...prev]);
    } catch (err) {
      setLipidError(err instanceof Error ? err.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
      setLipidAdvice("");
    } finally {
      setLipidLoading(false);
    }
  }

  function saveLipidToArchive() {
    const hasMetrics =
      lipidForm.date ||
      lipidForm.cholesterol ||
      lipidForm.hdl ||
      lipidForm.ldl ||
      lipidForm.triglycerides ||
      lipidForm.glucose;
    if (!hasMetrics) {
      setLipidError("–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å");
      return;
    }
    setLipidError(null);
    const record: LipidRecord = {
      id: createRecordId(),
      createdAt: new Date().toISOString(),
      date: lipidForm.date,
      cholesterol: lipidForm.cholesterol,
      hdl: lipidForm.hdl,
      ldl: lipidForm.ldl,
      triglycerides: lipidForm.triglycerides,
      glucose: lipidForm.glucose,
      goal: lipidForm.goal,
      question: lipidForm.question.trim(),
      comment: lipidForm.comment.trim(),
      advice: ""
    };
    setLipidHistory(prev => [record, ...prev]);
  }

  async function handleNutritionSubmit(e: FormEvent) {
    e.preventDefault();
    setNutritionLoading(true);
    setNutritionError(null);
    try {
      const facts: string[] = [];
      if (nutritionForm.weight) facts.push(`–º–∞—Å—Å–∞ —Ç–µ–ª–∞ ${nutritionForm.weight} –∫–≥`);
      if (nutritionForm.height) facts.push(`—Ä–æ—Å—Ç ${nutritionForm.height} —Å–º`);
      if (nutritionForm.calories) facts.push(`—Å—É—Ç–æ—á–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å ${nutritionForm.calories} –∫–∫–∞–ª`);
      if (nutritionForm.activity) facts.push(`—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${nutritionForm.activity}`);
      if (nutritionForm.comment) facts.push(`–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${nutritionForm.comment}`);
      const prompt = [
        "–¢—ã ‚Äî –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Å—Ç–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ä–µ–∂–∏–º—É –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 1-2 –Ω–µ–¥–µ–ª–∏.",
        facts.length > 0 ? `–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${facts.join(", ")}.` : "–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–ª –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        nutritionForm.question
          ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: ${nutritionForm.question}.`
          : "–°–¥–µ–ª–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏.",
        "–ù–∞–ø–æ–º–Ω–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞ –ø—Ä–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö."
      ].join(" ");
      const reply = await askAssistant(prompt);
      const trimmedReply = reply.trim();
      setNutritionAdvice(trimmedReply);
      const record: NutritionRecord = {
        id: createRecordId(),
        createdAt: new Date().toISOString(),
        weight: nutritionForm.weight,
        height: nutritionForm.height,
        calories: nutritionForm.calories,
        activity: nutritionForm.activity,
        question: nutritionForm.question.trim(),
        comment: nutritionForm.comment.trim(),
        advice: trimmedReply
      };
      setNutritionHistory(prev => [record, ...prev]);
    } catch (err) {
      setNutritionError(err instanceof Error ? err.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
      setNutritionAdvice("");
    } finally {
      setNutritionLoading(false);
    }
  }

  async function sendAssistantMessage(e: FormEvent) {
    e.preventDefault();
    const text = assistantInput.trim();
    if (!text) return;
    if (!userStore.token || !jsonHeaders) {
      setAssistantError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏, —á—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º");
      return;
    }
    const historyPayload = assistantMessages.map(message => ({
      role: message.role,
      content: message.content
    }));
    setAssistantMessages(prev => [...prev, { role: "user", content: text }]);
    setAssistantInput("");
    setAssistantLoading(true);
    setAssistantError(null);
    try {
      const r = await fetch(apiUrl("/assistant/chat"), {
        method: "POST",
        headers: jsonHeaders,
        body: JSON.stringify({ message: text, history: historyPayload })
      });
      const data = await r.json();
      if (!r.ok || typeof data.reply !== "string") {
        const message = typeof data.error === "string" ? data.error : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        throw new Error(message);
      }
      setAssistantMessages(prev => [...prev, { role: "assistant", content: data.reply.trim() }]);
    } catch (err) {
      setAssistantError(err instanceof Error ? err.message : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    } finally {
      setAssistantLoading(false);
    }
  }

  function resetAssistant() {
    setAssistantMessages([]);
    setAssistantInput("");
    setAssistantError(null);
  }

  function renderAuth() {
    return (
      <div className="auth">
        <h1>CholestoFit</h1>
        <p>–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</p>
        <form className="card" onSubmit={handleAuthSubmit}>
          <label>
            Email
            <input type="email" value={email} onChange={e => setEmail(e.target.value)} required />
          </label>
          <label>
            –ü–∞—Ä–æ–ª—å
            <span className="password-input">
              <input
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={e => setPassword(e.target.value)}
                required
              />
              <button type="button" className="ghost" onClick={() => setShowPassword(prev => !prev)}>
                {showPassword ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å"}
              </button>
            </span>
          </label>
          <button type="submit">{mode === "login" ? "–í–æ–π—Ç–∏" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}</button>
          {userStore.error && <p className="error">{userStore.error}</p>}
        </form>
        <button className="ghost" type="button" onClick={() => setMode(prev => (prev === "login" ? "register" : "login"))}>
          {mode === "login" ? "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç" : "–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç"}
        </button>
      </div>
    );
  }

  function renderBloodPressureTab() {
    return (
      <div className="tab-panel tab-stack">
        <h2>–î–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—É–ª—å—Å</h2>
        <form className="card" onSubmit={handleBloodPressureSubmit}>
          <div className="metrics-grid">
            <label>
              –°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –º–º —Ä—Ç. —Å—Ç.
              <input
                type="number"
                min="0"
                value={bpForm.systolic}
                onChange={e => setBpForm({ ...bpForm, systolic: e.target.value })}
              />
            </label>
            <label>
              –î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –º–º —Ä—Ç. —Å—Ç.
              <input
                type="number"
                min="0"
                value={bpForm.diastolic}
                onChange={e => setBpForm({ ...bpForm, diastolic: e.target.value })}
              />
            </label>
            <label>
              –ü—É–ª—å—Å, —É–¥/–º–∏–Ω
              <input
                type="number"
                min="0"
                value={bpForm.pulse}
                onChange={e => setBpForm({ ...bpForm, pulse: e.target.value })}
              />
            </label>
          </div>
          <div className="goal-group">
            <span className="goal-label">–¶–µ–ª—å:</span>
            <label className="goal-option">
              <input
                type="radio"
                name="bp-goal"
                value="lower"
                checked={bpForm.goal === "lower"}
                onChange={() => setBpForm({ ...bpForm, goal: "lower" })}
              />
              –°–Ω–∏–∑–∏—Ç—å
            </label>
            <label className="goal-option">
              <input
                type="radio"
                name="bp-goal"
                value="raise"
                checked={bpForm.goal === "raise"}
                onChange={() => setBpForm({ ...bpForm, goal: "raise" })}
              />
              –ü–æ–≤—ã—Å–∏—Ç—å
            </label>
          </div>
          <label>
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–∏–º–ø—Ç–æ–º—ã
            <textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã?"
              value={bpForm.question}
              onChange={e => setBpForm({ ...bpForm, question: e.target.value })}
            />
          </label>
          <label>
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ—Ä–µ–Ω–∏—é
            <textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∏–∑–º–µ—Ä—è–ª —É—Ç—Ä–æ–º –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"
              value={bpForm.comment}
              onChange={e => setBpForm({ ...bpForm, comment: e.target.value })}
            />
          </label>
          <div className="form-actions">
            <button type="button" className="ghost" onClick={saveBloodPressureToArchive} disabled={bpLoading}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            </button>
            <button type="submit" disabled={bpLoading}>
              {bpLoading ? "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..." : "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã"}
            </button>
            {bpError && <p className="error">{bpError}</p>}
          </div>
        </form>
        {bpAdvice && (
          <article className="card advice-result">
            <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            <pre className="advice-text">{bpAdvice}</pre>
          </article>
        )}
        {bpHistory.length > 0 && (
          <details className="card history-card" open>
            <summary>–ê—Ä—Ö–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤</summary>
            <ul className="history-list">
              {bpHistory.map(entry => (
                <li key={entry.id} className="history-item">
                  <div className="history-meta">
                    <span className="history-tag">{formatDateTime(entry.createdAt)}</span>
                    <div className="metric-tags">
                      {entry.systolic && <span className="metric-tag">–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ: {entry.systolic}</span>}
                      {entry.diastolic && <span className="metric-tag">–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ: {entry.diastolic}</span>}
                      {entry.pulse && <span className="metric-tag">–ü—É–ª—å—Å: {entry.pulse}</span>}
                      <span
                        className={`metric-tag goal ${entry.goal === "lower" ? "goal-lower" : "goal-raise"}`}
                      >
                        –¶–µ–ª—å: {entry.goal === "lower" ? "–°–Ω–∏–∑–∏—Ç—å" : "–ü–æ–≤—ã—Å–∏—Ç—å"}
                      </span>
                    </div>
                  </div>
                  {entry.question && (
                    <p className="history-question">
                      <strong>–í–æ–ø—Ä–æ—Å:</strong> {entry.question}
                    </p>
                  )}
                  {entry.comment && (
                    <p className="history-comment">
                      <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {entry.comment}
                    </p>
                  )}
                  {entry.advice && <pre className="history-advice">{entry.advice}</pre>}
                </li>
              ))}
            </ul>
          </details>
        )}
      </div>
    );
  }

  function renderLipidTab() {
    return (
      <div className="tab-panel tab-stack">
        <h2>–õ–∏–ø–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–∞—Ö–∞—Ä</h2>
        <form className="card" onSubmit={handleLipidSubmit}>
          <div className="metrics-grid">
            <label>
              –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
              <input type="date" value={lipidForm.date} onChange={e => setLipidForm({ ...lipidForm, date: e.target.value })} />
            </label>
            <label>
              –û–±—â–∏–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω, –º–º–æ–ª—å/–ª
              <input
                type="number"
                step="0.1"
                min="0"
                value={lipidForm.cholesterol}
                onChange={e => setLipidForm({ ...lipidForm, cholesterol: e.target.value })}
              />
            </label>
            <label>
              –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –õ–ü–í–ü (HDL), –º–º–æ–ª—å/–ª
              <input
                type="number"
                step="0.1"
                min="0"
                value={lipidForm.hdl}
                onChange={e => setLipidForm({ ...lipidForm, hdl: e.target.value })}
              />
            </label>
            <label>
              –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –õ–ü–ù–ü (LDL), –º–º–æ–ª—å/–ª
              <input
                type="number"
                step="0.1"
                min="0"
                value={lipidForm.ldl}
                onChange={e => setLipidForm({ ...lipidForm, ldl: e.target.value })}
              />
            </label>
            <label>
              –¢—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã, –º–º–æ–ª—å/–ª
              <input
                type="number"
                step="0.1"
                min="0"
                value={lipidForm.triglycerides}
                onChange={e => setLipidForm({ ...lipidForm, triglycerides: e.target.value })}
              />
            </label>
            <label>
              –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–≥–ª—é–∫–æ–∑–∞), –º–º–æ–ª—å/–ª
              <input
                type="number"
                step="0.1"
                min="0"
                value={lipidForm.glucose}
                onChange={e => setLipidForm({ ...lipidForm, glucose: e.target.value })}
              />
            </label>
          </div>
          <div className="goal-columns">
            <div className="goal-group">
              <span className="goal-label">–¶–µ–ª—å:</span>
              <label className="goal-option">
                <input
                  type="radio"
                  name="lipid-goal"
                  value="lower"
                  checked={lipidForm.goal === "lower"}
                  onChange={() => setLipidForm({ ...lipidForm, goal: "lower" })}
                />
                –°–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫–∏
              </label>
              <label className="goal-option">
                <input
                  type="radio"
                  name="lipid-goal"
                  value="raise"
                  checked={lipidForm.goal === "raise"}
                  onChange={() => setLipidForm({ ...lipidForm, goal: "raise" })}
                />
                –ü–æ–≤—ã—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
              </label>
            </div>
          </div>
          <label>
            –ß—Ç–æ –µ—â—ë –≤–∞–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å?
            <textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏–Ω–∏–º–∞—é —Å—Ç–∞—Ç–∏–Ω—ã –∏ —Ö–æ—á—É –ø–æ–Ω—è—Ç—å, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω"
              value={lipidForm.question}
              onChange={e => setLipidForm({ ...lipidForm, question: e.target.value })}
            />
          </label>
          <label>
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–Ω–∞–ª–∏–∑—É
            <textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–¥–∞–≤–∞–ª –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞ —Ç–µ—Ä–∞–ø–∏–∏"
              value={lipidForm.comment}
              onChange={e => setLipidForm({ ...lipidForm, comment: e.target.value })}
            />
          </label>
          <div className="form-actions">
            <button type="button" className="ghost" onClick={saveLipidToArchive} disabled={lipidLoading}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            </button>
            <button type="submit" disabled={lipidLoading}>
              {lipidLoading ? "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..." : "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã"}
            </button>
            {lipidError && <p className="error">{lipidError}</p>}
          </div>
        </form>
        {lipidAdvice && (
          <article className="card advice-result">
            <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            <pre className="advice-text">{lipidAdvice}</pre>
          </article>
        )}
        {lipidHistory.length > 0 && (
          <details className="card history-card" open>
            <summary>–ê—Ä—Ö–∏–≤ –ª–∏–ø–∏–¥–æ–≤ –∏ —Å–∞—Ö–∞—Ä–∞</summary>
            <ul className="history-list">
              {lipidHistory.map(entry => (
                <li key={entry.id} className="history-item">
                  <div className="history-meta">
                    <span className="history-tag">{formatDateTime(entry.createdAt)}</span>
                    <div className="metric-tags">
                      {entry.date && <span className="metric-tag">–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {entry.date}</span>}
                      {entry.cholesterol && <span className="metric-tag">–û–±—â–∏–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω: {entry.cholesterol}</span>}
                      {entry.hdl && <span className="metric-tag">–õ–ü–í–ü: {entry.hdl}</span>}
                      {entry.ldl && <span className="metric-tag">–õ–ü–ù–ü: {entry.ldl}</span>}
                      {entry.triglycerides && <span className="metric-tag">–¢—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã: {entry.triglycerides}</span>}
                      {entry.glucose && <span className="metric-tag">–ì–ª—é–∫–æ–∑–∞: {entry.glucose}</span>}
                      <span className={`metric-tag goal ${entry.goal === "lower" ? "goal-lower" : "goal-raise"}`}>
                        –¶–µ–ª—å: {entry.goal === "lower" ? "–°–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫–∏" : "–ü–æ–≤—ã—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è"}
                      </span>
                    </div>
                  </div>
                  {entry.question && (
                    <p className="history-question">
                      <strong>–í–æ–ø—Ä–æ—Å:</strong> {entry.question}
                    </p>
                  )}
                  {entry.comment && (
                    <p className="history-comment">
                      <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {entry.comment}
                    </p>
                  )}
                  {entry.advice && <pre className="history-advice">{entry.advice}</pre>}
                </li>
              ))}
            </ul>
          </details>
        )}
      </div>
    );
  }

  function renderNutritionTab() {
    return (
      <div className="tab-panel tab-stack">
        <h2>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞</h2>
        <form className="card" onSubmit={handleNutritionSubmit}>
          <div className="metrics-grid">
            <label>
              –í–µ—Å, –∫–≥
              <input
                type="number"
                min="0"
                step="0.1"
                value={nutritionForm.weight}
                onChange={e => setNutritionForm({ ...nutritionForm, weight: e.target.value })}
              />
            </label>
            <label>
              –†–æ—Å—Ç, —Å–º
              <input
                type="number"
                min="0"
                value={nutritionForm.height}
                onChange={e => setNutritionForm({ ...nutritionForm, height: e.target.value })}
              />
            </label>
            <label>
              –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞, –∫–∫–∞–ª
              <input
                type="number"
                min="0"
                value={nutritionForm.calories}
                onChange={e => setNutritionForm({ ...nutritionForm, calories: e.target.value })}
              />
            </label>
            <label>
              –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
              <input
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é"
                value={nutritionForm.activity}
                onChange={e => setNutritionForm({ ...nutritionForm, activity: e.target.value })}
              />
            </label>
          </div>
          <label>
            –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
            <textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ö–æ—á—É —Å–Ω–∏–∑–∏—Ç—å –≤–µ—Å –±–µ–∑ –∂–µ—Å—Ç–∫–∏—Ö –¥–∏–µ—Ç"
              value={nutritionForm.question}
              onChange={e => setNutritionForm({ ...nutritionForm, question: e.target.value })}
            />
          </label>
          <label>
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º
            <textarea
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: –∫–∞–∫ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–µ–±—è, —á—Ç–æ –µ–ª–∏"
              value={nutritionForm.comment}
              onChange={e => setNutritionForm({ ...nutritionForm, comment: e.target.value })}
            />
          </label>
          <div className="form-actions">
            <button type="submit" disabled={nutritionLoading}>
              {nutritionLoading ? "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..." : "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã"}
            </button>
            {nutritionError && <p className="error">{nutritionError}</p>}
          </div>
        </form>
        {nutritionAdvice && (
          <article className="card advice-result">
            <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            <pre className="advice-text">{nutritionAdvice}</pre>
          </article>
        )}
        {nutritionHistory.length > 0 && (
          <details className="card history-card" open>
            <summary>–ê—Ä—Ö–∏–≤ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞</summary>
            <ul className="history-list">
              {nutritionHistory.map(entry => (
                <li key={entry.id} className="history-item">
                  <div className="history-meta">
                    <span className="history-tag">{formatDateTime(entry.createdAt)}</span>
                    <div className="metric-tags">
                      {entry.weight && <span className="metric-tag">–í–µ—Å: {entry.weight} –∫–≥</span>}
                      {entry.height && <span className="metric-tag">–†–æ—Å—Ç: {entry.height} —Å–º</span>}
                      {entry.calories && <span className="metric-tag">–ö–∞–ª–æ—Ä–∏–∏: {entry.calories}</span>}
                      {entry.activity && <span className="metric-tag">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {entry.activity}</span>}
                    </div>
                  </div>
                  {entry.question && (
                    <p className="history-question">
                      <strong>–ó–∞–ø—Ä–æ—Å:</strong> {entry.question}
                    </p>
                  )}
                  {entry.comment && (
                    <p className="history-comment">
                      <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {entry.comment}
                    </p>
                  )}
                  {entry.advice && <pre className="history-advice">{entry.advice}</pre>}
                </li>
              ))}
            </ul>
          </details>
        )}
      </div>
    );
  }

  function renderAssistantTab() {
    return (
      <div className="tab-panel assistant-panel">
        <h2>AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</h2>
        <div className="card assistant-card">
          <div className="assistant-messages">
            {assistantMessages.length === 0 && <p className="muted">–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏—Ç.</p>}
            {assistantMessages.map((message, index) => (
              <div key={`${message.role}-${index}`} className={`assistant-message ${message.role}`}>
                <span className="assistant-role">{message.role === "user" ? "–í—ã" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"}</span>
                <p>{message.content}</p>
              </div>
            ))}
          </div>
          <form className="assistant-form" onSubmit={sendAssistantMessage}>
            <textarea
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç"
              value={assistantInput}
              onChange={e => setAssistantInput(e.target.value)}
              rows={3}
            />
            <div className="assistant-actions">
              <button type="submit" disabled={assistantLoading}>
                {assistantLoading ? "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
              </button>
              <button type="button" className="ghost" onClick={resetAssistant}>
                –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥
              </button>
              {assistantError && <p className="error">{assistantError}</p>}
            </div>
          </form>
        </div>
      </div>
    );
  }

  if (!userStore.token) {
    return renderAuth();
  }

  return (
    <div className="app-shell">
      <header className="topbar">
        <div className="brand">
          <h1>CholestoFit</h1>
          <p>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é</p>
        </div>
        <div className="topbar-profile">
          <div className="topbar-profile-text">
            <span className="topbar-profile-label">–ê–∫–∫–∞—É–Ω—Ç</span>
            <span className="topbar-profile-email">{userStore.me?.email ?? email}</span>
          </div>
          <button className="ghost" type="button" onClick={() => userStore.logout()}>
            –í—ã–π—Ç–∏
          </button>
        </div>
      </header>
      <main className="content">
        <div className="tab-container">
          {activeTab === "bp" && renderBloodPressureTab()}
          {activeTab === "lipid" && renderLipidTab()}
          {activeTab === "nutrition" && renderNutritionTab()}
          {activeTab === "assistant" && renderAssistantTab()}
        </div>
      </main>
      <nav className="tabbar">
        {TAB_ITEMS.map(item => (
          <button
            key={item.key}
            type="button"
            className={`tab-button${activeTab === item.key ? " active" : ""}`}
            onClick={() => setActiveTab(item.key)}
          >
            <span className="tab-icon" aria-hidden>{item.icon}</span>
            <span className="tab-label">{item.label}</span>
          </button>
        ))}
      </nav>
    </div>
  );
});

export default App;
