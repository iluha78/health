import { useEffect, useMemo, useState } from "react";
import type { FormEvent } from "react";
import { observer } from "mobx-react-lite";
import { userStore } from "./stores/user";
import type { AssistantMessage } from "./types/api";
import { apiUrl } from "./lib/api";
import "./App.css";

type TabKey = "bp" | "metabolic" | "nutrition" | "assistant";
type AdjustmentGoal = "lower" | "raise";

const TAB_ITEMS: { key: TabKey; label: string; icon: string }[] = [
  { key: "bp", label: "–î–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—É–ª—å—Å", icon: "ü©∫" },
  { key: "metabolic", label: "–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –∏ —Å–∞—Ö–∞—Ä", icon: "ü©∏" },
  { key: "nutrition", label: "–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥", icon: "ü•ó" },
  { key: "assistant", label: "AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", icon: "ü§ñ" }
];

const App = observer(() => {
  const [mode, setMode] = useState<"login" | "register">("login");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const [activeTab, setActiveTab] = useState<TabKey>("bp");

  const [bpForm, setBpForm] = useState({
    systolic: "",
    diastolic: "",
    pulse: "",
    goal: "lower" as AdjustmentGoal,
    question: ""
  });
  const [bpAdvice, setBpAdvice] = useState("");
  const [bpLoading, setBpLoading] = useState(false);
  const [bpError, setBpError] = useState<string | null>(null);

  const [metabolicForm, setMetabolicForm] = useState({
    cholesterol: "",
    sugar: "",
    cholGoal: "lower" as AdjustmentGoal,
    sugarGoal: "lower" as AdjustmentGoal,
    question: ""
  });
  const [metabolicAdvice, setMetabolicAdvice] = useState("");
  const [metabolicLoading, setMetabolicLoading] = useState(false);
  const [metabolicError, setMetabolicError] = useState<string | null>(null);

  const [nutritionForm, setNutritionForm] = useState({
    weight: "",
    height: "",
    calories: "",
    activity: "",
    question: ""
  });
  const [nutritionAdvice, setNutritionAdvice] = useState("");
  const [nutritionLoading, setNutritionLoading] = useState(false);
  const [nutritionError, setNutritionError] = useState<string | null>(null);

  const [assistantMessages, setAssistantMessages] = useState<AssistantMessage[]>([]);
  const [assistantInput, setAssistantInput] = useState("");
  const [assistantLoading, setAssistantLoading] = useState(false);
  const [assistantError, setAssistantError] = useState<string | null>(null);

  const jsonHeaders = useMemo(() => {
    if (!userStore.token) return undefined;
    return {
      Authorization: `Bearer ${userStore.token}`,
      "Content-Type": "application/json"
    } as Record<string, string>;
  }, [userStore.token]);

  useEffect(() => {
    if (userStore.token) {
      setActiveTab("bp");
      if (!userStore.me) {
        void userStore.refresh();
      }
    } else {
      resetState();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [userStore.token]);

  function resetState() {
    setActiveTab("bp");
    setBpForm({ systolic: "", diastolic: "", pulse: "", goal: "lower", question: "" });
    setBpAdvice("");
    setBpError(null);
    setMetabolicForm({ cholesterol: "", sugar: "", cholGoal: "lower", sugarGoal: "lower", question: "" });
    setMetabolicAdvice("");
    setMetabolicError(null);
    setNutritionForm({ weight: "", height: "", calories: "", activity: "", question: "" });
    setNutritionAdvice("");
    setNutritionError(null);
    setAssistantMessages([]);
    setAssistantInput("");
    setAssistantError(null);
    setAssistantLoading(false);
  }

  async function handleAuthSubmit(e: FormEvent) {
    e.preventDefault();
    try {
      if (mode === "login") {
        await userStore.login(email, password);
      } else {
        await userStore.register(email, password);
      }
    } catch (err) {
      console.error(err);
    }
  }

  async function askAssistant(prompt: string): Promise<string> {
    if (!userStore.token || !jsonHeaders) {
      throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
    }
    const r = await fetch(apiUrl("/assistant/chat"), {
      method: "POST",
      headers: jsonHeaders,
      body: JSON.stringify({ message: prompt, history: [] })
    });
    const data = await r.json();
    if (!r.ok || typeof data.reply !== "string") {
      const message = typeof data.error === "string" ? data.error : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞";
      throw new Error(message);
    }
    return data.reply.trim();
  }

  async function handleBloodPressureSubmit(e: FormEvent) {
    e.preventDefault();
    setBpLoading(true);
    setBpError(null);
    try {
      const metrics: string[] = [];
      if (bpForm.systolic) metrics.push(`—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ ${bpForm.systolic} –º–º —Ä—Ç. —Å—Ç.`);
      if (bpForm.diastolic) metrics.push(`–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ ${bpForm.diastolic} –º–º —Ä—Ç. —Å—Ç.`);
      if (bpForm.pulse) metrics.push(`–ø—É–ª—å—Å ${bpForm.pulse} —É–¥/–º–∏–Ω`);
      const metricSummary = metrics.length > 0 ? metrics.join(", ") : "–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã";
      const goalText = bpForm.goal === "lower" ? "—Å–Ω–∏–∑–∏—Ç—å" : "–ø–æ–≤—ã—Å–∏—Ç—å";
      const prompt = [
        "–¢—ã ‚Äî –∫–∞—Ä–¥–∏–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.",
        `–ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–æ–±—â–∞–µ—Ç: ${metricSummary}.`,
        `–ü–æ–º–æ–≥–∏ ${goalText} –¥–∞–≤–ª–µ–Ω–∏–µ –∏/–∏–ª–∏ –ø—É–ª—å—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.`,
        "–î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏ –∏ —É–ø–æ–º—è–Ω–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        bpForm.question ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞: ${bpForm.question}.` : ""
      ]
        .filter(Boolean)
        .join(" ");
      const reply = await askAssistant(prompt);
      setBpAdvice(reply);
    } catch (err) {
      setBpError(err instanceof Error ? err.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
      setBpAdvice("");
    } finally {
      setBpLoading(false);
    }
  }

  async function handleMetabolicSubmit(e: FormEvent) {
    e.preventDefault();
    setMetabolicLoading(true);
    setMetabolicError(null);
    try {
      const metrics: string[] = [];
      if (metabolicForm.cholesterol) metrics.push(`–æ–±—â–∏–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω ${metabolicForm.cholesterol} –º–º–æ–ª—å/–ª`);
      if (metabolicForm.sugar) metrics.push(`—É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –Ω–∞—Ç–æ—â–∞–∫ ${metabolicForm.sugar} –º–º–æ–ª—å/–ª`);
      const goalParts: string[] = [];
      if (metabolicForm.cholesterol) {
        goalParts.push(`–ù—É–∂–Ω–æ ${metabolicForm.cholGoal === "lower" ? "—Å–Ω–∏–∑–∏—Ç—å" : "–ø–æ–≤—ã—Å–∏—Ç—å"} —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω.`);
      }
      if (metabolicForm.sugar) {
        goalParts.push(`–ù—É–∂–Ω–æ ${metabolicForm.sugarGoal === "lower" ? "—Å–Ω–∏–∑–∏—Ç—å" : "–ø–æ–≤—ã—Å–∏—Ç—å"} —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞.`);
      }
      const prompt = [
        "–¢—ã ‚Äî –≤—Ä–∞—á –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –∏ —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥.",
        metrics.length > 0 ? `–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: ${metrics.join(", ")}.` : "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–ª —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.",
        goalParts.join(" "),
        "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤: –ø–∏—Ç–∞–Ω–∏–µ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫–æ–Ω—Ç—Ä–æ–ª—å –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –∏ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        metabolicForm.question ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞: ${metabolicForm.question}.` : ""
      ]
        .filter(Boolean)
        .join(" ");
      const reply = await askAssistant(prompt);
      setMetabolicAdvice(reply);
    } catch (err) {
      setMetabolicError(err instanceof Error ? err.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
      setMetabolicAdvice("");
    } finally {
      setMetabolicLoading(false);
    }
  }

  async function handleNutritionSubmit(e: FormEvent) {
    e.preventDefault();
    setNutritionLoading(true);
    setNutritionError(null);
    try {
      const facts: string[] = [];
      if (nutritionForm.weight) facts.push(`–º–∞—Å—Å–∞ —Ç–µ–ª–∞ ${nutritionForm.weight} –∫–≥`);
      if (nutritionForm.height) facts.push(`—Ä–æ—Å—Ç ${nutritionForm.height} —Å–º`);
      if (nutritionForm.calories) facts.push(`—Å—É—Ç–æ—á–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å ${nutritionForm.calories} –∫–∫–∞–ª`);
      if (nutritionForm.activity) facts.push(`—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${nutritionForm.activity}`);
      const prompt = [
        "–¢—ã ‚Äî –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Å—Ç–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ä–µ–∂–∏–º—É –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 1-2 –Ω–µ–¥–µ–ª–∏.",
        facts.length > 0 ? `–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${facts.join(", ")}.` : "–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–ª –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        nutritionForm.question
          ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: ${nutritionForm.question}.`
          : "–°–¥–µ–ª–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏.",
        "–ù–∞–ø–æ–º–Ω–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞ –ø—Ä–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö."
      ].join(" ");
      const reply = await askAssistant(prompt);
      setNutritionAdvice(reply);
    } catch (err) {
      setNutritionError(err instanceof Error ? err.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
      setNutritionAdvice("");
    } finally {
      setNutritionLoading(false);
    }
  }

  async function sendAssistantMessage(e: FormEvent) {
    e.preventDefault();
    const text = assistantInput.trim();
    if (!text) return;
    if (!userStore.token || !jsonHeaders) {
      setAssistantError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏, —á—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º");
      return;
    }
    const historyPayload = assistantMessages.map(message => ({
      role: message.role,
      content: message.content
    }));
    setAssistantMessages(prev => [...prev, { role: "user", content: text }]);
    setAssistantInput("");
    setAssistantLoading(true);
    setAssistantError(null);
    try {
      const r = await fetch(apiUrl("/assistant/chat"), {
        method: "POST",
        headers: jsonHeaders,
        body: JSON.stringify({ message: text, history: historyPayload })
      });
      const data = await r.json();
      if (!r.ok || typeof data.reply !== "string") {
        const message = typeof data.error === "string" ? data.error : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        throw new Error(message);
      }
      setAssistantMessages(prev => [...prev, { role: "assistant", content: data.reply.trim() }]);
    } catch (err) {
      setAssistantError(err instanceof Error ? err.message : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    } finally {
      setAssistantLoading(false);
    }
  }

  function resetAssistant() {
    setAssistantMessages([]);
    setAssistantInput("");
    setAssistantError(null);
  }

  function renderAuth() {
    return (
      <div className="auth">
        <h1>CholestoFit</h1>
        <p>–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</p>
        <form className="card" onSubmit={handleAuthSubmit}>
          <label>
            Email
            <input type="email" value={email} onChange={e => setEmail(e.target.value)} required />
          </label>
          <label>
            –ü–∞—Ä–æ–ª—å
            <span className="password-input">
              <input
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={e => setPassword(e.target.value)}
                required
              />
              <button type="button" className="ghost" onClick={() => setShowPassword(prev => !prev)}>
                {showPassword ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å"}
              </button>
            </span>
          </label>
          <button type="submit">{mode === "login" ? "–í–æ–π—Ç–∏" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}</button>
          {userStore.error && <p className="error">{userStore.error}</p>}
        </form>
        <button className="ghost" type="button" onClick={() => setMode(prev => (prev === "login" ? "register" : "login"))}>
          {mode === "login" ? "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç" : "–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç"}
        </button>
      </div>
    );
  }

  function renderBloodPressureTab() {
    return (
      <div className="tab-panel tab-stack">
        <h2>–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–∞–≤–ª–µ–Ω–∏—è –∏ –ø—É–ª—å—Å–∞</h2>
        <form className="card" onSubmit={handleBloodPressureSubmit}>
          <div className="metrics-grid">
            <label>
              –°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –º–º —Ä—Ç. —Å—Ç.
              <input
                type="number"
                min="0"
                value={bpForm.systolic}
                onChange={e => setBpForm({ ...bpForm, systolic: e.target.value })}
              />
            </label>
            <label>
              –î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –º–º —Ä—Ç. —Å—Ç.
              <input
                type="number"
                min="0"
                value={bpForm.diastolic}
                onChange={e => setBpForm({ ...bpForm, diastolic: e.target.value })}
              />
            </label>
            <label>
              –ü—É–ª—å—Å, —É–¥/–º–∏–Ω
              <input
                type="number"
                min="0"
                value={bpForm.pulse}
                onChange={e => setBpForm({ ...bpForm, pulse: e.target.value })}
              />
            </label>
          </div>
          <div className="goal-group">
            <span className="goal-label">–¶–µ–ª—å:</span>
            <label className="goal-option">
              <input
                type="radio"
                name="bp-goal"
                value="lower"
                checked={bpForm.goal === "lower"}
                onChange={() => setBpForm({ ...bpForm, goal: "lower" })}
              />
              –°–Ω–∏–∑–∏—Ç—å
            </label>
            <label className="goal-option">
              <input
                type="radio"
                name="bp-goal"
                value="raise"
                checked={bpForm.goal === "raise"}
                onChange={() => setBpForm({ ...bpForm, goal: "raise" })}
              />
              –ü–æ–≤—ã—Å–∏—Ç—å
            </label>
          </div>
          <label>
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–∏–º–ø—Ç–æ–º—ã
            <textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã?"
              value={bpForm.question}
              onChange={e => setBpForm({ ...bpForm, question: e.target.value })}
            />
          </label>
          <div className="form-actions">
            <button type="submit" disabled={bpLoading}>
              {bpLoading ? "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..." : "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã"}
            </button>
            {bpError && <p className="error">{bpError}</p>}
          </div>
        </form>
        {bpAdvice && (
          <article className="card advice-result">
            <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            <pre className="advice-text">{bpAdvice}</pre>
          </article>
        )}
      </div>
    );
  }

  function renderMetabolicTab() {
    return (
      <div className="tab-panel tab-stack">
        <h2>–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –∏ —Å–∞—Ö–∞—Ä</h2>
        <form className="card" onSubmit={handleMetabolicSubmit}>
          <div className="metrics-grid">
            <label>
              –û–±—â–∏–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω, –º–º–æ–ª—å/–ª
              <input
                type="number"
                step="0.1"
                min="0"
                value={metabolicForm.cholesterol}
                onChange={e => setMetabolicForm({ ...metabolicForm, cholesterol: e.target.value })}
              />
            </label>
            <label>
              –ì–ª—é–∫–æ–∑–∞ –Ω–∞—Ç–æ—â–∞–∫, –º–º–æ–ª—å/–ª
              <input
                type="number"
                step="0.1"
                min="0"
                value={metabolicForm.sugar}
                onChange={e => setMetabolicForm({ ...metabolicForm, sugar: e.target.value })}
              />
            </label>
          </div>
          <div className="goal-columns">
            <div className="goal-group">
              <span className="goal-label">–¶–µ–ª—å –ø–æ —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω—É:</span>
              <label className="goal-option">
                <input
                  type="radio"
                  name="chol-goal"
                  value="lower"
                  checked={metabolicForm.cholGoal === "lower"}
                  onChange={() => setMetabolicForm({ ...metabolicForm, cholGoal: "lower" })}
                />
                –°–Ω–∏–∑–∏—Ç—å
              </label>
              <label className="goal-option">
                <input
                  type="radio"
                  name="chol-goal"
                  value="raise"
                  checked={metabolicForm.cholGoal === "raise"}
                  onChange={() => setMetabolicForm({ ...metabolicForm, cholGoal: "raise" })}
                />
                –ü–æ–≤—ã—Å–∏—Ç—å
              </label>
            </div>
            <div className="goal-group">
              <span className="goal-label">–¶–µ–ª—å –ø–æ —Å–∞—Ö–∞—Ä—É:</span>
              <label className="goal-option">
                <input
                  type="radio"
                  name="sugar-goal"
                  value="lower"
                  checked={metabolicForm.sugarGoal === "lower"}
                  onChange={() => setMetabolicForm({ ...metabolicForm, sugarGoal: "lower" })}
                />
                –°–Ω–∏–∑–∏—Ç—å
              </label>
              <label className="goal-option">
                <input
                  type="radio"
                  name="sugar-goal"
                  value="raise"
                  checked={metabolicForm.sugarGoal === "raise"}
                  onChange={() => setMetabolicForm({ ...metabolicForm, sugarGoal: "raise" })}
                />
                –ü–æ–≤—ã—Å–∏—Ç—å
              </label>
            </div>
          </div>
          <label>
            –ß—Ç–æ –µ—â—ë –≤–∞–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å?
            <textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏–Ω–∏–º–∞—é —Å—Ç–∞—Ç–∏–Ω—ã –∏ —Ö–æ—á—É –ø–æ–Ω—è—Ç—å, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω"
              value={metabolicForm.question}
              onChange={e => setMetabolicForm({ ...metabolicForm, question: e.target.value })}
            />
          </label>
          <div className="form-actions">
            <button type="submit" disabled={metabolicLoading}>
              {metabolicLoading ? "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..." : "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã"}
            </button>
            {metabolicError && <p className="error">{metabolicError}</p>}
          </div>
        </form>
        {metabolicAdvice && (
          <article className="card advice-result">
            <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            <pre className="advice-text">{metabolicAdvice}</pre>
          </article>
        )}
      </div>
    );
  }

  function renderNutritionTab() {
    return (
      <div className="tab-panel tab-stack">
        <h2>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞</h2>
        <form className="card" onSubmit={handleNutritionSubmit}>
          <div className="metrics-grid">
            <label>
              –í–µ—Å, –∫–≥
              <input
                type="number"
                min="0"
                step="0.1"
                value={nutritionForm.weight}
                onChange={e => setNutritionForm({ ...nutritionForm, weight: e.target.value })}
              />
            </label>
            <label>
              –†–æ—Å—Ç, —Å–º
              <input
                type="number"
                min="0"
                value={nutritionForm.height}
                onChange={e => setNutritionForm({ ...nutritionForm, height: e.target.value })}
              />
            </label>
            <label>
              –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞, –∫–∫–∞–ª
              <input
                type="number"
                min="0"
                value={nutritionForm.calories}
                onChange={e => setNutritionForm({ ...nutritionForm, calories: e.target.value })}
              />
            </label>
            <label>
              –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
              <input
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é"
                value={nutritionForm.activity}
                onChange={e => setNutritionForm({ ...nutritionForm, activity: e.target.value })}
              />
            </label>
          </div>
          <label>
            –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
            <textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ö–æ—á—É —Å–Ω–∏–∑–∏—Ç—å –≤–µ—Å –±–µ–∑ –∂–µ—Å—Ç–∫–∏—Ö –¥–∏–µ—Ç"
              value={nutritionForm.question}
              onChange={e => setNutritionForm({ ...nutritionForm, question: e.target.value })}
            />
          </label>
          <div className="form-actions">
            <button type="submit" disabled={nutritionLoading}>
              {nutritionLoading ? "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..." : "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã"}
            </button>
            {nutritionError && <p className="error">{nutritionError}</p>}
          </div>
        </form>
        {nutritionAdvice && (
          <article className="card advice-result">
            <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            <pre className="advice-text">{nutritionAdvice}</pre>
          </article>
        )}
      </div>
    );
  }

  function renderAssistantTab() {
    return (
      <div className="tab-panel assistant-panel">
        <h2>AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</h2>
        <div className="card assistant-card">
          <div className="assistant-messages">
            {assistantMessages.length === 0 && <p className="muted">–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏—Ç.</p>}
            {assistantMessages.map((message, index) => (
              <div key={`${message.role}-${index}`} className={`assistant-message ${message.role}`}>
                <span className="assistant-role">{message.role === "user" ? "–í—ã" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"}</span>
                <p>{message.content}</p>
              </div>
            ))}
          </div>
          <form className="assistant-form" onSubmit={sendAssistantMessage}>
            <textarea
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç"
              value={assistantInput}
              onChange={e => setAssistantInput(e.target.value)}
              rows={3}
            />
            <div className="assistant-actions">
              <button type="submit" disabled={assistantLoading}>
                {assistantLoading ? "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
              </button>
              <button type="button" className="ghost" onClick={resetAssistant}>
                –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥
              </button>
              {assistantError && <p className="error">{assistantError}</p>}
            </div>
          </form>
        </div>
      </div>
    );
  }

  if (!userStore.token) {
    return renderAuth();
  }

  return (
    <div className="app-shell">
      <header className="topbar">
        <div className="brand">
          <h1>CholestoFit</h1>
          <p>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é</p>
        </div>
        <div className="topbar-profile">
          <div className="topbar-profile-text">
            <span className="topbar-profile-label">–ê–∫–∫–∞—É–Ω—Ç</span>
            <span className="topbar-profile-email">{userStore.me?.email ?? email}</span>
          </div>
          <button className="ghost" type="button" onClick={() => userStore.logout()}>
            –í—ã–π—Ç–∏
          </button>
        </div>
      </header>
      <main className="content">
        <div className="tab-container">
          {activeTab === "bp" && renderBloodPressureTab()}
          {activeTab === "metabolic" && renderMetabolicTab()}
          {activeTab === "nutrition" && renderNutritionTab()}
          {activeTab === "assistant" && renderAssistantTab()}
        </div>
      </main>
      <nav className="tabbar">
        {TAB_ITEMS.map(item => (
          <button
            key={item.key}
            type="button"
            className={`tab-button${activeTab === item.key ? " active" : ""}`}
            onClick={() => setActiveTab(item.key)}
          >
            <span className="tab-icon" aria-hidden>{item.icon}</span>
            <span className="tab-label">{item.label}</span>
          </button>
        ))}
      </nav>
    </div>
  );
});

export default App;
